import pytest
from seedsigner.models.seed import InvalidSeedException, Seed, ElectrumSeed

from seedsigner.models.settings import SettingsConstants


# TODO: Change TAB indents to SPACE

def test_seed():
	seed = Seed(mnemonic="obscure bone gas open exotic abuse virus bunker shuffle nasty ship dash".split())
	
	assert seed.seed_bytes == b'q\xb3\xd1i\x0c\x9b\x9b\xdf\xa7\xd9\xd97H\xa8,\xa7\xd9>\xeck\xc2\xf5ND?, \x88-\x07\x9aa\xc5\xee\xb7\xbf\xc4x\xd6\x07 X\xb6}?M\xaa\x05\xa6\xa7(>\xbf\x03\xb0\x9d\xef\xed":\xdf\x88w7'
	
	assert seed.mnemonic_str == "obscure bone gas open exotic abuse virus bunker shuffle nasty ship dash"
	
	assert seed.passphrase == ""
	
	# TODO: Not yet supported in new implementation
	# seed.set_wordlist_language_code("es")
	
	# assert seed.mnemonic_str == "natural ayuda futuro nivel espejo abuelo vago bien repetir moreno relevo conga"
	
	# seed.set_wordlist_language_code(SettingsConstants.WORDLIST_LANGUAGE__ENGLISH)
	
	# seed.mnemonic_str = "height demise useless trap grow lion found off key clown transfer enroll"
	
	# assert seed.mnemonic_str == "height demise useless trap grow lion found off key clown transfer enroll"
	
	# # TODO: Not yet supported in new implementation
	# seed.set_wordlist_language_code("es")
	
	# assert seed.mnemonic_str == "hebilla criÃÅa truco tigre gris llenar folio negocio laico casa tieso eludir"
	
	# seed.set_passphrase("test")
	
	# assert seed.seed_bytes == b'\xdd\r\xcb\x0b V\xb4@\xee+\x01`\xabem\xc1B\xfd\x8fba0\xab;[\xab\xc9\xf9\xba[F\x0c5,\x7fd8\xebI\x90"\xb8\x86C\x821\x01\xdb\xbe\xf3\xbc\x1cBH"%\x18\xc2{\x04\x08a]\xa5'
	
	# assert seed.passphrase == "test"

	
def test_electrum_seed():
	"""
	ElectrumSeed should correctly parse a modern Electrum mnemonic.
	"""
	seed = ElectrumSeed(mnemonic="regular reject rare profit once math fringe chase until ketchup century escape".split())

	intended_seed = b'\xcan|\xf8\x8a\x8d\xf78=Pq\xc4_\xe6\x02\x91\xfcs\xb2[\xed*\xdc\xc7%\xb6[_-(~D\xe5\x1e\x85%N\x9c\x03\x9dh\xafX}\x16\xb1\x99,\xbe\xc4\x11\xfaW\x0f\xb0\x89yD\xf4\x0f\xd5?\x8eA'

	assert seed.seed_bytes == intended_seed


def test_electrum_mnemonic_format():
	"""
	ElectrumSeed should reject mnemonics that are not 12 words long.
	"""
	with pytest.raises(InvalidSeedException):
		ElectrumSeed(mnemonic=["regular"] * 11)

	with pytest.raises(InvalidSeedException):
		ElectrumSeed(mnemonic=["regular"] * 13)

	with pytest.raises(InvalidSeedException):
		ElectrumSeed(mnemonic=["regular"] * 24)


def test_electrum_seed_rejects_most_bip39_mnemonics():
	"""
	ElectrumSeed should throw an exception for most BIP-39 mnemonics.

	There are 1/16 odds that a seed will be valid for both formats.
	"""
	# Most BIP-39 seeds should fail; test seeds generated by bitcoiner.guide
	with pytest.raises(InvalidSeedException):
		ElectrumSeed(mnemonic="pioneer divide volcano art victory family grow novel mandate bicycle senior adjust".split())

	with pytest.raises(InvalidSeedException):
		ElectrumSeed(mnemonic="gentle combine cool hamster ghost harvest gossip lend dismiss slam any toast".split())

	with pytest.raises(InvalidSeedException):
		ElectrumSeed(mnemonic="enough board blossom stamp fire buffalo digital solution sadness random number stone".split())

	# This one is valid for both formats
	mnemonic = "only gain spot output unknown craft simple cram absorb suggest ridge famous".split()
	Seed(mnemonic)
	ElectrumSeed(mnemonic)


def test_shamir_share_import_seed():
	# 12-word mnemonic, no passphrase
	share_set_formatted = [ "yield upgrade acrobat leader briefing capacity again epidemic minister frozen impulse math guilt lily install market modify envelope index become",
							"yield upgrade beard leader ceramic total morning critical brother slap lungs medical dilemma expect olympic jacket ruin airline promise literary"]

	seed_sss = Seed.recover_from_shares(share_set_formatted, slip39_passphrase="")

	seed_regular = Seed(mnemonic="once diamond onion six visa social chair long solve draw stool witness".split())

	assert seed_sss.seed_bytes == seed_regular.seed_bytes

	# 12-word mnemonic, with passphrase
	share_set_formatted = [ "window lunch ceramic leader cover satisfy emerald obesity impact purple gravity plains gasoline example cluster deadline license golden window teaspoon",
							"window lunch beard leader civil burden that extend husband oven forget husband identify arena furl diploma focus unwrap belong artwork"]

	seed_sss = Seed.recover_from_shares(share_set_formatted, slip39_passphrase="mupassphrase")

	seed_regular = Seed(mnemonic="cliff space wide equip pretty museum busy goddess camp embark matrix soldier".split())

	assert seed_sss.seed_bytes == seed_regular.seed_bytes

	# 24-word mnemonic, no passphrase
	share_set_formatted = ['slush flea agency academic angel lobe flea library writing clogs cards liberty river fiction therapy peasant uncover lend extend herald vampire seafood smug method syndrome grin moisture aunt aviation expand orange western froth', 
						'slush flea birthday academic angry hazard vampire tendency violence club vexed ocean energy material station mixture thumb submit process strategy lungs numerous unhappy location grasp both presence member grasp picture owner darkness saver', 
						'slush flea cleanup academic armed coal scroll fangs capture fused adorn argue military cylinder dismiss general forbid pleasure glimpse wavy award trouble belong spider fiber wisdom image fatigue surface favorite wolf spelling distance', 
						'slush flea desert academic avoid nuclear sympathy scene remind shaft budget taste window engage easel ranked fragment scout retailer express browser music friendly pharmacy husky explain lawsuit chew smear camera unfair belong modern', 
						'slush flea email academic arcade emission forward short adequate location disease fitness paper syndrome coding knit random order railroad emerald canyon thorn adjust ceiling knife false kidney gums mountain disease software flame famous']


	seed_sss = Seed.recover_from_shares(share_set_formatted, slip39_passphrase="")

	seed_regular = Seed(mnemonic="volume lock pulse large evoke body diet borrow food promote divide track wall february virtual brick hood diary work delay torch upon truth spray".split())

	assert seed_sss.seed_bytes == seed_regular.seed_bytes

	# 24-word mnemonic, with passphrase
	share_set_formatted = ['blessing leader agency academic alien valid husky inherit duckling favorite angel skin hazard response peanut process spew treat breathe boring sweater either valid dismiss herd program increase typical chest pumps legal tension acrobat', 
						'blessing leader birthday academic amount escape physics leaf dining furl being domain editor glasses finance chest argue garden satoshi wolf marathon elite salt salary clock military review ting security length trust apart system', 
						'blessing leader cleanup academic angry depend costume work leaf believe general museum alto spew greatest favorite cowboy slow endorse beam patrol intimate source canyon actress body ceramic silent kitchen camera genre deadline iris', 
						'blessing leader desert academic aluminum fake iris permit sympathy genre security flavor species upgrade pajamas shaft kidney sister clogs mobile thorn gross marathon penalty dismiss guilt modern provide fatal shelter railroad require permit', 
						'blessing leader email academic anxiety blessing diet slim military listen smith carbon artwork bike salt purchase unhappy observe burden rebuild imply dismiss slow penalty award receiver industry peanut squeeze husband armed evaluate drink']

	seed_sss = Seed.recover_from_shares(share_set_formatted, slip39_passphrase="mupassphrase")

	seed_regular = Seed(mnemonic="butter hole monkey orphan strong split predict song desk oak spirit myth bomb wise same build already vacant damp gallery found praise bread melody".split())

	assert seed_sss.seed_bytes == seed_regular.seed_bytes